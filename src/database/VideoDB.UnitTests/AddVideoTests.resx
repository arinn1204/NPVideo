<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="expectedSchemaCondition2.Configuration" xml:space="preserve">
    <value>Press to configure</value>
  </metadata>
  <data name="expectedSchemaCondition2.Schema" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAE5TeXN0ZW0uRGF0YSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJl
        PW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAABNTeXN0ZW0uRGF0YS5E
        YXRhU2V0AwAAABdEYXRhU2V0LlJlbW90aW5nVmVyc2lvbglYbWxTY2hlbWELWG1sRGlmZkdyYW0DAQEO
        U3lzdGVtLlZlcnNpb24CAAAACQMAAAAGBAAAAK8SPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0i
        dXRmLTE2Ij8+DQo8eHM6c2NoZW1hIGlkPSJOZXdEYXRhU2V0IiB4bWxucz0iIiB4bWxuczp4cz0iaHR0
        cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOm1zZGF0YT0idXJuOnNjaGVtYXMtbWlj
        cm9zb2Z0LWNvbTp4bWwtbXNkYXRhIj4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTmV3RGF0YVNldCIgbXNk
        YXRhOklzRGF0YVNldD0idHJ1ZSIgbXNkYXRhOkxvY2FsZT0iZW4tVVMiPg0KICAgIDx4czpjb21wbGV4
        VHlwZT4NCiAgICAgIDx4czpjaG9pY2UgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCI+
        DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IlRhYmxlIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5
        cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5h
        bWU9ImltZGJfaWQiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5P
        Y2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Im1vdmllX3RpdGxlIiB0
        eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0K
        ICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJtb3ZpZV9yYXRpbmciIHR5cGU9InhzOnN0cmlu
        ZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAg
        IDx4czplbGVtZW50IG5hbWU9InJ1bnRpbWUiIHR5cGU9InhzOmRlY2ltYWwiIG1zZGF0YTp0YXJnZXRO
        YW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1l
        PSJwbG90IiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJz
        PSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJyZWxlYXNlX2RhdGUiIHR5cGU9
        InhzOmRhdGVUaW1lIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAg
        ICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0icmVzb2x1dGlvbiIgdHlwZT0ieHM6c3RyaW5nIiBt
        c2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhz
        OmVsZW1lbnQgbmFtZT0iY29kZWMiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFj
        ZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImdlbnJl
        X25hbWUiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9
        IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9ImZpcnN0X25hbWUiIHR5cGU9Inhz
        OnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAg
        ICAgICAgIDx4czplbGVtZW50IG5hbWU9Im1pZGRsZV9uYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0
        YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxl
        bWVudCBuYW1lPSJsYXN0X25hbWUiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFj
        ZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InN1ZmZp
        eCIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIg
        Lz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0icGVyc29uX3JvbGUiIHR5cGU9InhzOnN0
        cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAg
        ICAgIDx4czplbGVtZW50IG5hbWU9InJhdGluZ19zb3VyY2UiIHR5cGU9InhzOnN0cmluZyIgbXNkYXRh
        OnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVt
        ZW50IG5hbWU9InJhdGluZ192YWx1ZSIgdHlwZT0ieHM6ZGVjaW1hbCIgbXNkYXRhOnRhcmdldE5hbWVz
        cGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9InVw
        ZGF0ZWQiIHR5cGU9InhzOmJvb2xlYW4iIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJz
        PSIwIiAvPg0KICAgICAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgICAgICA8L3hzOmNvbXBsZXhU
        eXBlPg0KICAgICAgICA8L3hzOmVsZW1lbnQ+DQogICAgICA8L3hzOmNob2ljZT4NCiAgICA8L3hzOmNv
        bXBsZXhUeXBlPg0KICA8L3hzOmVsZW1lbnQ+DQo8L3hzOnNjaGVtYT4GBQAAAIABPGRpZmZncjpkaWZm
        Z3JhbSB4bWxuczptc2RhdGE9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206eG1sLW1zZGF0YSIgeG1s
        bnM6ZGlmZmdyPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnhtbC1kaWZmZ3JhbS12MSIgLz4EAwAA
        AA5TeXN0ZW0uVmVyc2lvbgQAAAAGX01ham9yBl9NaW5vcgZfQnVpbGQJX1JldmlzaW9uAAAAAAgICAgC
        AAAAAAAAAP//////////Cw==
</value>
  </data>
  <data name="AddVideoReturnsInsertedVideoAsResultSet_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = getdate(),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'ReturnsInsertedVideo';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;
</value>
  </data>
  <data name="AddVideoReturnsInsertedVideoAsResultSet_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/
</value>
  </data>
  <data name="AddVideoInsertsIntoVideoTable_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'InsertsIntoVideoTable';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT imdb_id, title, mpaa_rating, (SELECT CONVERT(VARCHAR, runtime, 102)), plot, video_type, release_date, resolution, codec 
FROM video.videos

</value>
  </data>
  <data name="AddVideoInsertsIntoVideoTable_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/
</value>
  </data>
  <data name="AddVideoInsertsIntoVideoTable_PosttestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run after 
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/</value>
  </data>
  <data name="testInitializeAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DELETE FROM video.genre_videos;
DELETE FROM video.person_videos;
DELETE FROM video.person_roles;
DELETE FROM video.genre_tv_episodes;
DELETE FROM video.person_tv_episodes;

DELETE FROM video.persons;
DELETE FROM video.roles;
DELETE FROM video.genres;
DELETE FROM video.ratings;
DELETE FROM video.tv_episodes;
DELETE FROM video.videos;

DBCC CHECKIDENT ('noblepanther_test.video.videos', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.genres', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.ratings', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.persons', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.roles', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.tv_episodes', RESEED, 0);
</value>
  </data>
  <data name="AddGenreWhenNotExist_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddGenreWhenNotExist';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS( source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT name
FROM video.genres;

</value>
  </data>
  <data name="DoesNotAddDuplicateGenres_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'DoesNotAddDuplicateGenres';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT name
FROM video.genres;

</value>
  </data>
  <data name="DoesNotAddDuplicateGenres_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

INSERT INTO video.genres(name)
	VALUES('Horror');</value>
  </data>
  <data name="AddsRatingsIntoTable_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddsRatingsIntoTable';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec,null,  @GENRES, @PERSONS, @RATINGS;

SELECT source, value
FROM video.ratings;

</value>
  </data>
  <data name="AddsMultipleGenres_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddsMultipleGenres';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @GENRES(name) VALUES('Comedy');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT name
FROM video.genres;

</value>
  </data>
  <data name="AddsMultipleRatingsWithDifferentSources_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddsMultipleRatingsDiffSources';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Rotten Tomatoes', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT source, value
FROM video.ratings;

</value>
  </data>
  <data name="AddMultipleRatingsWithSameSource_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddsMultipleRatingsSameSource';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT source, value
FROM video.ratings;

</value>
  </data>
  <data name="AddPersonRoleWhenNotExist_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddPersonRoleWhenNotExist';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT role_name
FROM video.roles;

</value>
  </data>
  <data name="DoesNotAddDuplicateRoles_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'DoesNotAddDuplicateRoles';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Actor');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT role_name
FROM video.roles;

</value>
  </data>
  <data name="LinksVideoWithAllGenresInJoiner_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'InsertsIntoGenreVideos';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @GENRES(name) VALUES('Comedy');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT video_id, genre_id
FROM video.genre_videos;

</value>
  </data>
  <data name="DoesNotLinkGenresAlreadyExistingButNotAssociatedWithVideo_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'DoesNotLinkExtraGenre';

INSERT INTO @GENRES(name) VALUES('Horror');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT video_id, genre_id
FROM video.genre_videos;

</value>
  </data>
  <data name="DoesNotLinkGenresAlreadyExistingButNotAssociatedWithVideo_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/


INSERT INTO video.genres(name)
	VALUES('Action');</value>
  </data>
  <data name="DoesNotAddDuplicateRoles_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

INSERT INTO video.roles(role_name)
	VALUES ('Actor');</value>
  </data>
  <data name="AddPersonThatDoesntExist_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddPersonThatDoesntExist';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT first_name, middle_name, last_name, suffix
FROM video.persons;

</value>
  </data>
  <data name="AddSeveralPeopleWithOneExisting_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddSeveralPeopleWithOneExist';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('Bobby', 'R', 'Kennedy', null, 'Actor');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('T.', 'Pain', null, null, 'Writer');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('Cher', null, null, null, 'Actor');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 12.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT first_name, middle_name, last_name, suffix
FROM video.persons;

SELECT first_name, middle_name, last_name, suffix
FROM video.persons
WHERE first_name = 'Cher';
</value>
  </data>
  <data name="AddSeveralPeopleWithOneExisting_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/


INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES('John', 'F', 'Kennedy', 'III');</value>
  </data>
  <data name="LinksPersonsWithRoles_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'LinksPersonsWithRoles';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('Bobby', 'R', 'Kennedy', 'III', 'Actor');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT person_id, role_id
FROM video.person_roles
ORDER BY person_id;

select * FROM video.roles;
select * from video.persons;

</value>
  </data>
  <data name="LinksPersonsWithRoles_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

INSERT INTO video.roles(role_name)
	VALUES('Producer');</value>
  </data>
  <data name="LinksPersonsWithVideo_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'LinksPersonsWithVideo';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('Bobby', 'R', 'Kennedy', 'III', 'Actor');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT person_id, video_id
FROM video.person_videos
ORDER BY person_id;
</value>
  </data>
  <data name="LinksPersonsWithVideo_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/


DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt12345',
       @title = 'Video Title2 goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'LinksPersonsWithVideoPreTest';

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date,
									resolution,
									codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution,
					@codec);</value>
  </data>
  <data name="CanInsertVideoUsingExistingStars_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'InsertVideoUsingExistingStars';

INSERT INTO @GENRES(name) VALUES('Horror');

INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Writer');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('Snoop', 'Doggy', 'Dog', null, 'Actor');
	INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('Snoop', 'Doggy', 'Dog', null, 'Producer');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Actor');


INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

INSERT INTO @RATINGS(source, value)
	VALUES ('Rotten Tomatoes', 49.5);

EXECUTE [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT genre_id, name FROM video.genres;

SELECT person_id, first_name, last_name
FROM video.persons;

SELECT person_id, first_name, last_name
FROM video.persons
WHERE first_name = 'John'
	AND last_name = 'Kennedy';

select role_name FROM video.roles;
select person_id, role_id from video.person_roles;
select person_id, video_id from video.person_videos;
select genre_id, video_id from video.genre_videos;
select video_id, source, value from video.ratings;
</value>
  </data>
  <data name="CanInsertVideoUsingExistingStars_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @modified DATETIME = GETDATE(),
	@modified_by VARCHAR(MAX) = 'CanInsertVideoUsingExistingStars',
	@imdb_id VARCHAR(MAX) = 'tt12345',
	@title VARCHAR(MAX) = 'Video Title2 goes here',
	@mpaa_rating VARCHAR(MAX) = 'PG-13',
	@runtime DECIMAL(5,2) = 120.95,
	@plot VARCHAR(MAX) = 'some plot here',
	@video_type VARCHAR(MAX) = 'movie',
	@release_date DATETIME = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
	@resolution VARCHAR(MAX) = '1080p',
	@codec VARCHAR(MAX) = 'x265';


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.genres(name)
	VALUES('Action');

INSERT INTO video.roles(role_name)
	VALUES('Actor');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec);

INSERT INTO video.persons(first_name, middle_name, last_name)
	VALUES ('T.', null, 'Pain');

INSERT INTO video.persons(first_name, middle_name, last_name)
	VALUES ('Snoop', 'Doggy', 'Dog');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 99.5);

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Rotten Tomato', 49.5);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (2, 1);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (2, 2);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(2, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(2, 1);</value>
  </data>
  <data name="AddExistingVideoWithDifferentResolutionAndInsert_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddGenreWhenNotExist';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT DISTINCT *
FROM video.videos;

SELECT DISTINCT v1.resolution
FROM video.videos v1
JOIN video.videos v2
	ON v1.video_id = v2.video_id
GROUP BY v1.resolution, v2.resolution;

</value>
  </data>
  <data name="AddExistingVideoWithDifferentResolutionAndInsert_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @modified DATETIME = GETDATE(),
	@modified_by VARCHAR(MAX) = 'CanInsertVideoUsingExistingStars',
	@imdb_id VARCHAR(MAX) = 'tt1234',
	@title VARCHAR(MAX) = 'Video Title goes here',
	@mpaa_rating VARCHAR(MAX) = 'PG-13',
	@runtime DECIMAL(5,2) = 120.95,
	@plot VARCHAR(MAX) = 'some plot here',
	@video_type VARCHAR(MAX) = 'movie',
	@release_date DATETIME = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
	@resolution VARCHAR(MAX) = '720p',
	@codec VARCHAR(MAX) = 'x265';


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec);

INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES ('John', 'F', 'Kennedy', 'III');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 11.34);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);
</value>
  </data>
  <data name="AddExistingVideoWithDifferentCodecAndInsert_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddExistingVideoWithDfrtCodec';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT DISTINCT v1.codec
FROM video.videos v1
JOIN video.videos v2
	ON v1.video_id = v2.video_id;

</value>
  </data>
  <data name="AddExistingVideoWithDifferentCodecAndInsert_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @modified DATETIME = GETDATE(),
	@modified_by VARCHAR(64) = 'AddExistingVidWithDfrtCodecPrTst',
	@imdb_id VARCHAR(MAX) = 'tt1234',
	@title VARCHAR(MAX) = 'Video Title goes here',
	@mpaa_rating VARCHAR(MAX) = 'PG-13',
	@runtime DECIMAL(5,2) = 120.95,
	@plot VARCHAR(MAX) = 'some plot here',
	@video_type VARCHAR(MAX) = 'movie',
	@release_date DATETIME = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
	@resolution VARCHAR(MAX) = '1080p',
	@codec VARCHAR(MAX) = 'x264';


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec);

INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES ('John', 'F', 'Kennedy', 'III');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 11.34);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);
</value>
  </data>
  <data name="AddExistingVideoWithDifferentRuntimeAndInsert_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (32), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 180.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'AddExistingVideoWithDfrtRuntime';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT DISTINCT v1.runtime
FROM video.videos v1
JOIN video.videos v2
	ON v1.video_id = v2.video_id;

</value>
  </data>
  <data name="AddExistingVideoWithDifferentRuntimeAndInsert_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @modified DATETIME = GETDATE(),
	@modified_by VARCHAR(64) = 'AddExistingVidWithDfrtRnTmePrTst',
	@imdb_id VARCHAR(MAX) = 'tt1234',
	@title VARCHAR(MAX) = 'Video Title goes here',
	@mpaa_rating VARCHAR(MAX) = 'PG-13',
	@runtime DECIMAL(5,2) = 120.95,
	@plot VARCHAR(MAX) = 'some plot here',
	@video_type VARCHAR(MAX) = 'movie',
	@release_date DATETIME = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
	@resolution VARCHAR(MAX) = '1080p',
	@codec VARCHAR(MAX) = 'x265';


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec);

INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES ('John', 'F', 'Kennedy', 'III');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 11.34);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);
</value>
  </data>
  <data name="AddExistingVideoWithExtendedCutAndInsert_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (32), 
	@extended AS VARCHAR(16),
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 180.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
	   @extended = 'Directors Cut',
       @modified_by = 'AddExistingVideoWithDfrtRuntime';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, @extended, @GENRES, @PERSONS, @RATINGS;

SELECT DISTINCT v1.extended_edition
FROM video.videos v1
JOIN video.videos v2
	ON v1.video_id = v2.video_id;
</value>
  </data>
  <data name="AddExistingVideoWithExtendedCutAndInsert_PretestAction.SqlScript" xml:space="preserve">
    <value>
/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @modified DATETIME = GETDATE(),
	@modified_by VARCHAR(64) = 'AddExistingVidWithDfrtRnTmePrTst',
	@imdb_id VARCHAR(MAX) = 'tt1234',
	@title VARCHAR(MAX) = 'Video Title goes here',
	@mpaa_rating VARCHAR(MAX) = 'PG-13',
	@runtime DECIMAL(5,2) = 120.95,
	@plot VARCHAR(MAX) = 'some plot here',
	@video_type VARCHAR(MAX) = 'movie',
	@release_date DATETIME = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
	@resolution VARCHAR(MAX) = '1080p',
	@codec VARCHAR(MAX) = 'x265';


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec);

INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES ('John', 'F', 'Kennedy', 'III');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 11.34);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);
</value>
  </data>
  <data name="AddExistingVideoAndUpdate_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some extended plot here with grammar changes',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'UpdateVideo';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT imdb_id, plot
FROM video.videos;

SELECT 1
FROM video.videos
WHERE imdb_id = 'tt1234'
	AND modified = added;
</value>
  </data>
  <data name="AddExistingVideoAndUpdate_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @modified DATETIME = GETDATE(),
	@modified_by VARCHAR(64) = 'UpdateVideoPreTest',
	@imdb_id VARCHAR(MAX) = 'tt1234',
	@title VARCHAR(MAX) = 'Video Title goes here',
	@mpaa_rating VARCHAR(MAX) = 'PG-13',
	@runtime DECIMAL(5,2) = 120.95,
	@plot VARCHAR(MAX) = 'some plot here',
	@video_type VARCHAR(MAX) = 'movie',
	@release_date DATETIME = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
	@resolution VARCHAR(MAX) = '1080p',
	@codec VARCHAR(MAX) = 'x265';


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec);

INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES ('John', 'F', 'Kennedy', 'III');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 11.34);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);
</value>
  </data>
  <data name="InsertingDuplicateVideoDoesNotUpdate_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here to exercise the database object 
that you want to test.

To test a stored procedure, invoke it here by adding 
an EXEC statement that has appropriate parameters.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

-- database unit test for video.add_video
DECLARE @RC AS INT, 
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@modified_by AS VARCHAR (64), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
       @modified_by = 'InsertingDuplicateVideo';

INSERT INTO @GENRES(name) VALUES('Horror');
INSERT INTO @PERSONS(first_name, middle_name, last_name, suffix, role_name) 
	VALUES('John', 'F', 'Kennedy', 'III', 'Director');

INSERT INTO @RATINGS(source, value)
	VALUES ('Metacritic', 11.34);

EXECUTE @RC = [video].[usp_add_movie_or_series] @imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, null, @GENRES, @PERSONS, @RATINGS;

SELECT imdb_id
FROM video.videos;

SELECT 1
FROM video.videos
WHERE added IS NOT NULL
	AND modified IS NULL;
</value>
  </data>
  <data name="InsertingDuplicateVideoDoesNotUpdate_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before
the test script is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/

DECLARE @RC AS INT, 
	@modified AS DATETIME,
	@imdb_id AS VARCHAR (32), 
	@title AS VARCHAR (64), 
	@mpaa_rating AS VARCHAR (8), 
	@runtime AS DECIMAL (5, 2), 
	@plot AS VARCHAR (8000), 
	@video_type AS VARCHAR (8), 
	@release_date AS DATETIME, 
	@resolution AS VARCHAR (16), 
	@codec AS VARCHAR (8), 
	@GENRES AS [video].[genre_table_type], 
	@PERSONS AS [video].[person_table_type], 
	@RATINGS AS [video].[rating_table_type];

SELECT @RC = 0,
       @imdb_id = 'tt1234',
       @title = 'Video Title goes here',
       @mpaa_rating = 'PG-13',
       @runtime = 120.95,
       @plot = 'some plot here',
       @video_type = 'movie',
       @release_date = (SELECT CONVERT(DATETIME, '12/04/1993', 102)),
       @resolution = '1080p',
       @codec = 'x265',
	   @modified = GETDATE();


INSERT INTO video.genres(name)
	VALUES('Horror');

INSERT INTO video.roles(role_name)
	VALUES('Director');

INSERT INTO video.videos(imdb_id, title, mpaa_rating, runtime, plot, video_type, release_date, resolution, codec, added, created_by)
	VALUES(@imdb_id, @title, @mpaa_rating, @runtime, @plot, @video_type, @release_date, @resolution, @codec, GETDATE(), (SELECT SYSTEM_USER));

INSERT INTO video.persons(first_name, middle_name, last_name, suffix)
	VALUES ('John', 'F', 'Kennedy', 'III');

INSERT INTO video.ratings(video_id, source, value)
	VALUES (1, 'Metacritic', 11.34);

INSERT INTO video.person_roles(person_id, role_id)
	VALUES (1, 1);

INSERT INTO video.genre_videos(genre_id, video_id)
	VALUES(1, 1);

INSERT INTO video.person_videos(person_id, video_id)
	VALUES(1, 1);
</value>
  </data>
  <data name="testCleanupAction.SqlScript" xml:space="preserve">
    <value>/*
Add SQL statements here that you want to run before 
each test method (unit test) in this test class is run.

In the lower pane, you can add test conditions that verify 
whether the results of your SQL statements match what 
you expect.
*/


DELETE FROM video.genre_videos;
DELETE FROM video.person_videos;
DELETE FROM video.person_roles;
DELETE FROM video.genre_tv_episodes;
DELETE FROM video.person_tv_episodes;

DELETE FROM video.persons;
DELETE FROM video.roles;
DELETE FROM video.genres;
DELETE FROM video.ratings;
DELETE FROM video.tv_episodes;
DELETE FROM video.videos;

DBCC CHECKIDENT ('noblepanther_test.video.videos', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.tv_episodes', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.genres', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.ratings', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.persons', RESEED, 0);
DBCC CHECKIDENT ('noblepanther_test.video.roles', RESEED, 0);
</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>